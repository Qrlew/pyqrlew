from __future__ import annotations
import typing as t
import enum

class Dataset:
    """Class that ...."""
    def __new__(self, dataset: str, schema: str, size: str) -> 'Dataset': ...
    def schema(self) -> str: ...
    def size(self) -> t.Optional[str]: ...
    def with_range(self, schema_name: str, table_name: str, field_name: str, min: float, max: float) -> 'Dataset': ...
    def with_possible_values(self, schema_name: str, table_name: str, field_name: str, possible_values: t.Iterable[str]) -> 'Dataset': ...
    def with_constraint(self, schema_name: str, table_name: str, field_name: str, constraint: t.Optional[str]) -> 'Dataset': ...
    def relations(self) -> 'Relation': ...
    def relation(self, query: str, dialect: t.Optional['Dialect']) -> 'Relation': ...
    def from_queries(self, queries: t.Iterable[t.Tuple[t.Iterable[str], str]], dialect: t.Optional['Dialect']) -> 'Dataset': ...
    def __str__(self) -> str: ...


class Relation:
    """Class that... """
    @staticmethod
    def from_query(query: str, dataset: Dataset, dialect: t.Optional['Dialect']) -> 'Relation': ...
    def __str__(self) -> str: ...
    def dot(self) -> str: ...
    def schema(self) -> str: ...
    def to_query(self, dialect: t.Optional['Dialect']=None) -> str: ...


class Dialect(enum.Enum):
    """Supported dialects"""
    PostgreSql=1
    MsSql=2
    BigQuery=3

